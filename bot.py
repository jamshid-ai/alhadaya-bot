import logging
import re
import os
from dotenv import load_dotenv

load_dotenv()

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor


logging.basicConfig(level=logging.INFO)
API_TOKEN = os.getenv('API_TOKEN')
CHANNEL_ID=os.getenv('CHANNEL_ID')
bot = Bot(token=API_TOKEN)

# For example use simple MemoryStorage for Dispatcher.
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# States
class Form(StatesGroup):
    problem = State()  # Will be represented in storage as 'Form:name'
    phone = State()  # Will be represented in storage as 'Form:age'
    # gender = State()
    name = State()  # Will be represented in storage as 'Form:gender'

# to send channel
async def send_message(channel_id: int, text: str):
    await bot.send_message(channel_id, text)

leed_data = {
    'problem': 'problem',
    'phone': 'phone',
    'name': 'name',
    'username': ''
}

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    """
    Conversation's entry point
    """

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("ü©∫ “ö–∞–Ω–¥–ª–∏ –¥–∏–∞–±–µ—Ç", "‚ô®Ô∏è –û—à“õ–æ–∑–æ–Ω –º—É–∞–º–º–æ—Å–∏")
    markup.add("ü©∏ “ö–æ–Ω –±–æ—Å–∏–º–∏", "üöΩ “ö–∞–±–∑–∏—è—Ç –º—É–∞–º–º–æ—Å–∏")

    # Set state
    await Form.problem.set()

    await bot.send_message(message.chat.id, text=f"""–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º üòä
‚öúÔ∏è *ALHADAYA* –º–∞“≥—Å—É–ª–æ—Ç–ª–∞—Ä–∏–º–∏–∑–≥–∞ “õ–∏–∑–∏“õ–∏—à –±–∏–ª–¥–∏—Ä–≥–∞–Ω–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞—Ö–º–∞—Ç!""", parse_mode=ParseMode.MARKDOWN)
    await bot.send_message(message.chat.id, text="üë©‚Äç‚öïÔ∏è *–°–∏–∑–Ω–∏ “õ–∞–π—Å–∏ –º—É–∞–º–º–æ –∫—û–ø—Ä–æ“õ –±–µ–∑–æ–≤—Ç–∞ “õ–∏–ª—è–ø—Ç–∏?*üëá", reply_markup=markup, parse_mode=ParseMode.MARKDOWN)

@dp.message_handler(state=Form.problem)
async def process_name(message: types.Message, state: FSMContext):
    """
    Process user name
    """
    async with state.proxy() as data:
        data['problem'] = message.text
        leed_data['problem'] = message.text


    markup = types.ReplyKeyboardRemove()
    await Form.next()
    await bot.send_message(message.chat.id, text=f"üë©‚Äç‚öïÔ∏è –¢—É—à—É–Ω–∞—Ä–ª–∏ –º–∞–ª–∞–∫–∞–ª–∏ –º—É—Ç–∞—Ö–∞—Å—Å–∏—Å–ª–∞—Ä–∏–º–∏–∑ —Å–∏–∑ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–± *{message.text}*–≥–∞ –æ–∏–¥ *–ë–ï–ü–£–õ* –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤–∞ ‚öúÔ∏è *ALHADAYA*–Ω–∏–Ω–≥ —Ñ–æ–π–¥–∞–ª–∏ —Ö—É—Å—É—Å–∏—è—Ç–ª–∞—Ä–∏ —Ç—û“ì—Ä–∏—Å–∏–¥–∞ –±–∞—Ç–∞—Ñ—Å–∏–ª –º–∞—ä–ª—É–º–æ—Ç –±–µ—Ä–∏—à–∞–¥–∏ üòä""", parse_mode=ParseMode.MARKDOWN)
    await bot.send_message(message.chat.id, text="""‚ò∫Ô∏è *–ò–ª—Ç–∏–º–æ—Å —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ “õ–æ–ª–¥–∏—Ä–∏–Ω–≥!*

–ú–∞—Å–∞–ª–∞–Ω: +998-90-123-45-67""", reply_markup=markup, parse_mode=ParseMode.MARKDOWN)

Pattern = re.compile("(0|91)?[3-9][0-9]{7}")
# validate phone number
@dp.message_handler(lambda message: not Pattern.match(message.text), state=Form.phone)
async def process_phone_invalid(message: types.Message):
    """
    If age is invalid
    """
    return await message.reply("–ù–æ—Ç—û“ì—Ä–∏ —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–¥–∏–Ω–≥–∏–∑, “õ–∞–π—Ç–∞–¥–∞–Ω –∫–∏—Ä–∏—Ç–∏–Ω–≥!")

@dp.message_handler(lambda message: Pattern.match(message.text), state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    # Update state and data
    await Form.next()
    await state.update_data(phone=message.text)
    async with state.proxy() as data:
        leed_data['phone'] = data['phone']
        

    await bot.send_message(message.chat.id, text="üë§ *–ò—Å–º–∏–Ω–≥–∏–∑–Ω–∏ “≥–∞–º –∫–∏—Ä–∏—Ç–∏–Ω–≥:*", parse_mode=ParseMode.MARKDOWN)
    

@dp.message_handler(lambda message: message.text in [], state=Form.name)
async def process_gender_invalid(message: types.Message):
    """
    In this example gender has to be one of: Male, Female, Other.
    """
    return await message.reply("Bad gender name. Choose your gender from the keyboard.")

@dp.message_handler(state=Form.name)
async def process_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        leed_data['name'] = message.text
        leed_data['username'] = message.from_user.username

        
        await bot.send_message(
            message.chat.id, 
            text=f"""üéâ –¢–∞–±—Ä–∏–∫–ª–∞–π–º–∏–∑ *{data['name']}* —Å–∏–∑ *–ë–ï–ü–£–õ* –∫–æ–Ω—Å—É–ª—Ç–∞—Ü–∏—è–≥–∞ —ç–≥–∞ –±—û–ª–¥–∏–Ω–≥–∏–∑. –¢–µ–∑ –æ—Ä–∞–¥–∞ —Å–∏–∑ –±–∏–ª–∞–Ω –º–∞–ª–∞–∫–∞–ª–∏ –º—É—Ç–∞—Ö–∞—Å–∏—Å—Å–∏–º–∏–∑ –±–æ“ì–ª–∞–Ω–∞–¥–∏!

üßë‚Äçüíª “ö—û—à–∏–º—á–∞ —Å–∞–≤–æ–ª–ª–∞—Ä —É—á—É–Ω: *@Al_hadaya_3*""",
            parse_mode=ParseMode.MARKDOWN,
            
        )
        # await SendMessage(chat_id='@jamshid_files', text='Some content')
        await send_message(CHANNEL_ID, f"""Muammosi: {leed_data['problem']}
Ismi: {leed_data['name']}
Raqam: {leed_data['phone']}
Account: @{leed_data['username']}""")
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)